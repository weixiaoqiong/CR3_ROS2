cmake_minimum_required(VERSION 3.5)
project(dobot_bringup)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(builtin_interfaces REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_action REQUIRED)
find_package(control_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(std_msgs REQUIRED)
find_package(rclcpp_components REQUIRED)
find_package(dobot_bringup_msg REQUIRED)
find_package(dobot_bringup_srv REQUIRED)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

set(dependencies
  "rclcpp"
  "rclcpp_action"
  "control_msgs"
  "std_msgs"
  "sensor_msgs"
  "rclcpp_components"
  "dobot_bringup_msg"
  "dobot_bringup_srv")

include_directories(
    include
    #${colcon_INCLUDE_DIRS}
)

add_executable(cr5_bringup
  src/main.cpp src/tcp_socket.cpp src/cr5_robot.cpp
)
ament_target_dependencies(cr5_bringup ${dependencies})
install(TARGETS
  cr5_bringup
  DESTINATION lib/${PROJECT_NAME})

# Install launch files.
install(DIRECTORY
  launch
  DESTINATION share/${PROJECT_NAME}/
)


ament_export_dependencies(builtin_interfaces rclcpp)
ament_export_include_directories(include)
ament_export_libraries(${PROJECT_NAME}_node)

ament_package()
